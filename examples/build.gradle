import org.gradle.api.tasks.testing.logging.TestLogEvent

apply plugin: 'war'

repositories {
    maven { url 'https://maven.restlet.org' }
    jcenter()
}

dependencies {
    testCompile(
            project(':core')
    )
}

configurations {
    compile.exclude module: 'jai_core'

    // need to exclude those two to get rid of stuff taken from geotools dependencies (they break the tests)
    compile.exclude group: 'org.eclipse.emf', module: 'ecore'
    compile.exclude group: 'org.eclipse.emf', module: 'common'
    compile.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
}

def examplesDir = "${project(':examples').projectDir}/src/test/resources/examples"



task geoserver(type: Exec) {
    description 'Run GeoServer with test data'
    commandLine 'docker', 'run', '--rm', '--name=geoserver', '--prot=8080:8080', \
        "--volume=${projectDir}/geoserver-data:/opt/geoserver/data_dir", '--detatch', 'kartoza/geoserver'
}

// prevent that the tests target can be directly called. the integration tests
// must be run with `./gradlew examples:farmIntegrationTest` to make sure the
// server is running
test {}
test.onlyIf { false }

task integrationTest(type: Test) {
    testLogging {
        exceptionFormat = 'full'
        showCauses true
        showExceptions true
        showStackTraces true
        events TestLogEvent.STANDARD_OUT
    }
    maxHeapSize = "750M"
    reports {
        junitXml.enabled = true
        html.enabled = true
    }
}
integrationTest.dependsOn ':core:compileJava', 'geoserver'

afterEvaluate {
    build.dependsOn project.tasks['farmIntegrationTest']
    farmRun.dependsOn geoserver
    farmBeforeIntegrationTest.dependsOn geoserver
}
